/*
 *
 *  Multi Process Garbage Collector
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

/*
 * persistent.h
 *
 *  Created on: Sep 23, 2013
 *      Author: evank
 */

#ifndef PERSISTENT_H_
#define PERSISTENT_H_

#include "pheap/pheap.h"
#include <string>
#include <map>
#include <vector>
#include <utility>
#include <functional>
#include <type_traits>

namespace pheap {


  template <int N, typename CharT, typename Traits, typename Allocator>
  struct persistable<N, std::basic_string<CharT,Traits,Allocator>>
  {
	  using type = std::basic_string<persistent<N,CharT>,Traits,persistent_allocator<N,persistent<N,CharT>>>;
  };


  template <int N, typename T>
  struct persistable<N, T, std::enable_if_t<std::is_arithmetic<T>::value>>
  {
	  using type = T;
  };


  template <int N, typename Key, typename T, typename Compare, typename Allocator>
  struct persistable<N, std::map<Key,T,Compare,Allocator>>
  {
	  using type = std::map<persistent<N,Key>, persistent<N,T>, persistent<N,Compare>,
			  persistent_allocator<N,std::pair<const persistent<N,Key>, persistent<N,T>>>>;
  };

  template <int N, typename T>
  struct persistable<N, std::less<T>>
  {
	  using type = std::less<persistent<N,T>>;
  };

  template <int N, typename T, typename Allocator>
  struct persistable<N, std::vector<T,Allocator>>
  {
	  using type = std::vector<persistent<N,T>,persistent_allocator<N,persistent<N,T>>>;
  };

  template <int N, typename T1, typename T2>
  struct persistable<N, std::pair<T1,T2>>
  {
	  using type = std::pair<persistent<N,T1>, persistent<N,T2>>;
  };

}


#endif /* PERSISTENT_H_ */
