/*
 *
 *  Multi Process Garbage Collector
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

/*
 * spin.h
 *
 *  Created on: Oct 6, 2013
 *      Author: evank
 */

#ifndef SPIN_H_
#define SPIN_H_

#include <thread>

namespace pheap {
	class spin_loop {
	public:
		class max_exceeded {};

		spin_loop(unsigned spy = 2,
				unsigned yps = 2,
				std::chrono::nanoseconds first_sleep = std::chrono::microseconds(10),
				float mult = 2,
				std::chrono::nanoseconds max = std::chrono::seconds(1)) :
			spins_per_yield(spy),
			yields_per_sleep(yps),
			multiplier(mult),
			sleep_for(first_sleep),
			max_sleep(max),
			spins_since_yield(0),
			yields_since_sleep(0)
		{
		}

		bool operator()() {
			if (spins_since_yield == spins_per_yield) {
				spins_since_yield = 0;
				if (yields_since_sleep == yields_per_sleep) {
					yields_since_sleep = 0;
					if (sleep_for >= max_sleep) {
						throw max_exceeded();
					}
					std::this_thread::sleep_for(sleep_for);
					sleep_for *= multiplier;
				} else {
					std::this_thread::yield();
					yields_since_sleep++;
				}
			} else {
				spins_since_yield++;
			}
			return true;
		}


	private:
		const unsigned spins_per_yield;
		const unsigned yields_per_sleep;
		const float multiplier;
		std::chrono::nanoseconds sleep_for;
		const std::chrono::nanoseconds max_sleep;
		unsigned spins_since_yield = 0;
		unsigned yields_since_sleep = 0;
	};

	template <typename Pred>
	void spin_until(Pred pred,
			unsigned spy = 2,
			unsigned yps = 2,
			std::chrono::nanoseconds first_sleep = std::chrono::microseconds(10),
			float mult = 2,
			std::chrono::nanoseconds max = std::chrono::seconds(1))
	{
		spin_loop loop(spy, yps, first_sleep, mult, max);
		while (!pred() && loop()) {
		}
	}
}


#endif /* SPIN_H_ */
