/*
 *
 *  Multi Process Garbage Collector
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

/*
 * hashes.h
 *
 *  Created on: Sep 14, 2014
 *      Author: evank
 */

#ifndef HASHES_H_
#define HASHES_H_

#include <functional>
#include <array>
#include <limits>
#include <mutex>
#include <algorithm>
#include <cstdint>
#include "ruts/meta.h"
//#include "mapping_table.h"


namespace ruts {
  /*
   * Hash operators that are (1) very uniformly distributed and (2) fast to compute.
   * These are use in cuckoo_map, which assumes that the chances of two non-equal objects
   * hashing to the same values on both hash functions is negligible and which doesn't store
   * the hashes (it recomputes them as necessary.  uniform_key, which rolls two random numbers
   * on creation and returns one for each of the hashes, is the model.
   *
   * Cuckoo map also assumes that the hash of an object doesn't change once it's inserted as
   * a key.  It's okay if multiple equal objects hash to the same values, though.
   */
  template <typename T, typename Enabled = void> class hash1;
  template <typename T, typename Enabled = void> class hash2;

  template <typename T>
  struct intrinsic_hash1 {
    auto operator()(const T &val) const noexcept {
      return val.hash1();
    }
  };

  template <typename T>
  struct intrinsic_hash2 {
    auto operator()(const T &val) const noexcept {
      return val.hash2();
    }
  };

  template <typename T>
  struct delegate_hash {
    std::size_t operator()(const T &val) const noexcept {
      return ruts::hash1<T>()(val);
    }
  };

  /*
  inline std::uint64_t mapped_hash1(std::uint16_t val) {
    return mapped_hash<1>(val);
  }
  inline std::uint64_t mapped_hash2(std::uint16_t val) {
    return mapped_hash<2>(val);
  }
*/

}




#endif /* HASHES_H_ */
