/*
 *
 *  Multi Process Garbage Collector
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

/*
 * uints.h
 *
 *  Created on: Sep 3, 2014
 *      Author: evank
 */

#ifndef INTS_H_
#define INTS_H_

#include <cstdint>
#include <type_traits>

namespace ruts {
  namespace ints {
    template <std::size_t, typename Enable = void> struct int_t;
    template <std::size_t, typename Enable = void> struct uint_t;

    template <>
    struct int_t<8> {
      using exact = int8_t;
      using least = int_least8_t;
      using fast = int_fast8_t;
    };
    template <>
    struct int_t<16> {
      using exact = int16_t;
      using least = int_least16_t;
      using fast = int_fast16_t;
    };
    template <>
    struct int_t<32> {
      using exact = int32_t;
      using least = int_least32_t;
      using fast = int_fast32_t;
    };
    template <>
    struct int_t<64> {
      using exact = int64_t;
      using least = int_least64_t;
      using fast = int_fast64_t;
    };
    template <std::size_t N>
    struct int_t<N, std::enable_if_t<(N < 8)>> {
      using least = int_least8_t;
      using fast = int_fast8_t;
    };
    template <std::size_t N>
    struct int_t<N, std::enable_if_t<(N > 8 && N < 16)>> {
      using least = int_least16_t;
      using fast = int_fast16_t;
    };
    template <std::size_t N>
    struct int_t<N, std::enable_if_t<(N > 16 && N < 32)>> {
      using least = int_least32_t;
      using fast = int_fast32_t;
    };
    template <std::size_t N>
    struct int_t<N, std::enable_if_t<(N > 32 && N < 64)>> {
      using least = int_least64_t;
      using fast = int_fast64_t;
    };

    template <>
    struct uint_t<8> {
      using exact = uint8_t;
      using least = uint_least8_t;
      using fast = uint_fast8_t;
    };
    template <>
    struct uint_t<16> {
      using exact = uint16_t;
      using least = uint_least16_t;
      using fast = uint_fast16_t;
    };
    template <>
    struct uint_t<32> {
      using exact = uint32_t;
      using least = uint_least32_t;
      using fast = uint_fast32_t;
    };
    template <>
    struct uint_t<64> {
      using exact = uint64_t;
      using least = uint_least64_t;
      using fast = uint_fast64_t;
    };
    template <std::size_t N>
    struct uint_t<N, std::enable_if_t<(N < 8)>> {
      using least = uint_least8_t;
      using fast = uint_fast8_t;
    };
    template <std::size_t N>
    struct uint_t<N, std::enable_if_t<(N > 8 && N < 16)>> {
      using least = uint_least16_t;
      using fast = uint_fast16_t;
    };
    template <std::size_t N>
    struct uint_t<N, std::enable_if_t<(N > 16 && N < 32)>> {
      using least = uint_least32_t;
      using fast = uint_fast32_t;
    };
    template <std::size_t N>
    struct uint_t<N, std::enable_if_t<(N > 32 && N < 64)>> {
      using least = uint_least64_t;
      using fast = uint_fast64_t;
    };
  }
}



#endif /* INTS_H_ */
