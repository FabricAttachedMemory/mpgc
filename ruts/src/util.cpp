/*
 *
 *  Multi Process Garbage Collector
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

#include "ruts/util.h"
#include <cstdlib>
#include <string>
#include <array>
#include <algorithm>

namespace ruts {
    bool env_flag(const char *var) {
    const char *val = std::getenv(var);
    if (val == nullptr) {
      return false;
    }
    std::string s(val);
    if (s.empty()) {
      return false;
    }
    const std::array<const char *, 5>  true_vals{"1", "+", "true",  "on",  "yes"};
    const std::array<const char *, 5> false_vals{"0", "-", "false", "off", "no"};
    std::transform(s.begin(), s.end(), s.begin(), ::tolower);
    for (const auto &v : true_vals) {
      if (s == v) {
        return true;
      }
    }
    for (const auto &v : false_vals) {
      if (s == v) {
        return false;
      }
    }
    std::cerr << "${" << var << "} contains strange value '" << s << "'.  Assuming false."
              << std::endl;
    return false;
  }

  std::string env_string(const char *evar) {
    const char *val = std::getenv(evar);
    if (val == nullptr) {
      return std::string{};
    }
    return val;
  }

}
