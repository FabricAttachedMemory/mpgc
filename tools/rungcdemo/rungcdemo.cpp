/*
 *
 *  Multi Process Garbage Collector
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

/*
 * rungcdemo.cpp
 *
 *  Created on: June 15, 2016
 *      Author: uversky
 */

// Required for wait() feature test macros
#define _XOPEN_SOURCE 500

#include "../gcdemo/gcdemo.h"
#include <sys/types.h>
#include <sys/wait.h>
#include <unistd.h>
#include <chrono>
#include <cstdlib>
#include <cstring>
#include <getopt.h>
#include <iostream>
#include <string>

using namespace std;

const unsigned long _DEFAULT_NUM_USERS = 1e6,
                    _DEFAULT_NUM_ITERS = 10000;
const unsigned int  _DEFAULT_NUM_PROCESSES = 1,
                    _DEFAULT_NUM_THREADS = 1,
                    _DEFAULT_FEED_LENGTH = 250,
                    _DEFAULT_MEAN = 200;
const double        _DEFAULT_MEAN_POST_TAGS = 3.0,
                    _DEFAULT_MEAN_COMMENT_TAGS = 1.0,
                    _DEFAULT_RATIO = 0.6;
static const string _DEFAULT_NAME = "com.hpe.gcdemo.users";

void show_usage() {
   cerr << "usage: ./rungcdemo [options]\n\n"
        << "Create a social network graph of users and spawn clients to have users interact\n"
        << "  with each other via posts in their feed and comments on their posts.\n\n"
        << "Options:\n"
        << "-b, --txn-rate-" << underline("b") << "ench\n"
        << "  EXPERIMENTAL\n"
        << "  This flag currently sets a mode for measuring the transaction rate - i.e., the\n"
        << "  number of action iterations per second per thread.\n"
        << "-C, --" << underline("c") << "omment-tag-mean <C>\n"
        << "  Sets the mean number of tags added by each new comment to its parent post.\n"
        << "  Default: " << _DEFAULT_MEAN_COMMENT_TAGS << ".\n"
        << "-d, --" << underline("d") << "ebug-mode\n"
        << "  Outputs memory statistics occasionally during benchmarking mode.\n"
        << "  No effect unless -b is set.\n"
        << "-f, --" << underline("f") << "orce-clean\n"
        << "  If attempting to initialize a new graph (i.e. -s is not set) and an existing graph\n"
        << "  is found in the persistent heap, force its deletion instead of displaying a prompt\n"
        << "  to delete or keep the old graph.\n"
        << "  No effect if -s is set.\n"
        << "-h, --" << underline("h") << "elp\n"
        << "  Display this message.\n"
        << "-i, --" << underline("i") << "ters <i>\n"
        << "  Specifies the total number of action iterations across all processes and threads.\n"
        << "  An action involves picking a random user and then having that user either\n"
        << "    comment or post, based on the probability specified by -r.\n"
        << "  Default: " << _DEFAULT_NUM_ITERS << ".\n"
        << "-k, --" << underline("k") << "ill\n"
        << "  Clean up any previous executions by killing all running clients.\n"
        << "-l, --feed-" << underline("l") << "ength <l>\n"
        << "  Specifies the maximum length of the user's feed.  The user's feed acts as a queue,\n"
        << "  so the <l>+1th post will make the earliest remaining post drop off the feed.\n"
        << "  No effect if -s is set.\n"
        << "  Default: " << _DEFAULT_FEED_LENGTH << ".\n"
        << "-m, --" << underline("m") << "ean <m>\n"
        << "  Users' friendships follow an exponential distribution.  This argument sets the mean\n"
        << "  for that distribution, i.e. the average number of friends that a user might have.\n"
        << "  No effect if -s is set.\n"
        << "  Default: " << _DEFAULT_MEAN << ".\n"
        << "-n, --" << underline("n") << "ame <n>\n"
        << "  Specify the name (i.e. key) used to locate the graph in the persistent heap.\n"
        << "  Default: \'" << _DEFAULT_NAME << "\'.\n"
        << "-p, --num-" << underline("p") << "rocesses <p>\n"
        << "  Specifies the number of client processes to spawn.  Each process will spawn\n"
        << "  threads that perform work on the graph.\n"
        << "  Default: " << _DEFAULT_NUM_PROCESSES << ".\n"
        << "-P, --" << underline("p") << "ost-tag-mean <P>\n"
        << "  Sets the mean number of users tagged when a new post is made.\n"
        << "  Default: " << _DEFAULT_MEAN_POST_TAGS << ".\n"
        << "-r, --" << underline("r") << "atio <r: [0-1]>\n"
        << "  Indicates the probability that an action taken by a client process will result\n"
        << "  in a post.  1 indicates that all clients will only post, 0 that all will comment.\n"
        << "  Default: " << _DEFAULT_RATIO << ".\n"
        << "-s, --" << underline("s") << "kip-init\n"
        << "  Setting this flag skips the graph initialization phase and assumes that there is\n"
        << "  an existing graph in the persistent heap.\n"
        << "  Invalidates the following flags (they will have no effect): -f, -l, -m, -u.\n"
        << "-t, --num-" << underline("t") << "hreads <t>\n"
        << "  Specifies the number of worker threads to use per process.\n"
        << "  Default: " << _DEFAULT_NUM_THREADS << ".\n"
        << "-u, --num-" << underline("u") << "sers <u>\n"
        << "  Initialize graph with <u> users.\n"
        << "  No effect if -s is set.\n"
        << "  Default: " << _DEFAULT_NUM_USERS << ".\n";
}

int main(int argc, char ** argv)
{
  // For legibility's sake, long numbers should print with comma separators.
  // This is accomplished by setting the locale for our output streams - here
  // we set to "", or the local machine's current language settings.
  cout.imbue(locale(""));
  cerr.imbue(locale(""));

  // Boilerplate for option processing
  // a b f h i k l m n p r s t u
  struct option long_options[] = {
    {"txn-rate-bench",   no_argument,       0, 'b'},
    {"comment-tag-mean", required_argument, 0, 'C'},
    {"force",            no_argument,       0, 'f'},
    {"help",             no_argument,       0, 'h'},
    {"iters",            required_argument, 0, 'i'},
    {"kill",             no_argument,       0, 'k'},
    {"feed-length",      required_argument, 0, 'l'},
    {"mean",             required_argument, 0, 'm'},
    {"name",             required_argument, 0, 'n'},
    {"post-tag-mean",    required_argument, 0, 'P'},
    {"num-processes",    required_argument, 0, 'p'},
    {"ratio",            required_argument, 0, 'r'},
    {"skip-init",        no_argument,       0, 's'},
    {"num-threads",      required_argument, 0, 't'},
    {"num-users",        required_argument, 0, 'u'},
    {0,                  0,                 0,  0 }
  };

  unsigned long numUsers       = _DEFAULT_NUM_USERS,
                iters          = _DEFAULT_NUM_ITERS;
  unsigned int  numProcesses   = _DEFAULT_NUM_PROCESSES,
                numThreads     = _DEFAULT_NUM_THREADS,
                mean           = _DEFAULT_MEAN,
                feedLength     = _DEFAULT_FEED_LENGTH;
  double        postTagMean    = _DEFAULT_MEAN_POST_TAGS,
                commentTagMean = _DEFAULT_MEAN_COMMENT_TAGS,
                ratio          = _DEFAULT_RATIO;
  bool          isBenchmark    = false,
                isDebugMode    = false,
                killOld        = false,
                skipInit       = false,
                forceClear     = false;
  string        prName         = _DEFAULT_NAME;

  int opt;

  while((opt = getopt_long(argc, argv, "bC:dfhi:kl:m:n:P:p:r:st:u:", long_options, nullptr)) != -1) {
    switch(opt) {
      case 'b': isBenchmark = true;
                break;
      case 'C': commentTagMean = strtod(optarg, nullptr);
                break;
      case 'd': isDebugMode = true;
                break;
      case 'f': forceClear = true;
                break;
      case 'h': show_usage();
                return 0;
      case 'i': iters = atol(optarg);
                break;
      case 'k': killOld = true;
                break;
      case 'l': feedLength = atoi(optarg);
                break;
      case 'm': mean = atoi(optarg);
                break;
      case 'n': prName = optarg;
                break;
      case 'P': postTagMean = strtod(optarg, nullptr);
                break;
      case 'p': numProcesses = atoi(optarg);
                break;
      case 'r': ratio = strtod(optarg, nullptr);
                break;
      case 's': skipInit = true;
                break;
      case 't': numThreads = atoi(optarg);
                break;
      case 'u': numUsers = atol(optarg);
                break;
      case '?': show_usage();
                return -1;
    }
  }
  
  // More argument checking boilerplate...
  bool checkFailed = false;
  if (!skipInit) {
    // These arguments are completely ignored if -s is set
    if ((checkFailed = (feedLength == 0)))
      cerr << "Feed length must be a positive integer.\n";
    else if ((checkFailed = (mean == 0)))
      cerr << "Mean must be a positive integer.\n";
    else if ((checkFailed = (numUsers == 0)))
      cerr << "Number of users must be a positive integer.\n";

    if (checkFailed) {  
      show_usage();
      return -1;
    }
  }

  if ((checkFailed = (numProcesses == 0))) 
    cerr << "Number of processes must be a positive integer.\n";
  else if ((checkFailed = (numThreads == 0)))  
    cerr << "Number of threads must be a positive integer.\n";
  else if ((checkFailed = (postTagMean <= 0)))
    cerr << "Post tag mean must be positive.\n";
  else if ((checkFailed = (commentTagMean <= 0)))
    cerr << "Comment tag mean must be positive.\n";
  else if ((checkFailed = (iters == 0)))
    cerr << "Number of iterations must be a positive integer.\n";
  else if ((checkFailed = (ratio < 0 || ratio > 1)))
    cerr << "Ratio must be in [0-1] inclusive.\n";

  if (checkFailed) {
    show_usage();
    return -1;
  }

  if (killOld)
    system("pkill -9 -x gcdemo");

  if (!skipInit) {
    string initStr = string("./gcdemo-init")
                   + " -i " + to_string(iters)
                   + (forceClear ? " -f " : "")
                   + " -l " + to_string(feedLength)
                   + " -m " + to_string(mean)
                   + " -n " + prName
                   + " -t " + to_string(numProcesses * numThreads)
                   + " -u " + to_string(numUsers);
    system(initStr.c_str());
  }
  else {
    // The init process clears all of the relevant persistent heap counters.  If it is
    // skipped, this clearing still needs to be done.
    string phIterCtrName        = prName + ".iterCtr";
    string phRunningThreadsName = prName + ".runningThreads";
    string phMaxThreadsName     = prName + ".maxThreads";
    auto phIterCtrPtr =
      persistent_roots().lookup<gc_wrapped<atomic<unsigned long>>>(phIterCtrName);
    auto phRunningThreadsPtr =
      persistent_roots().lookup<gc_wrapped<atomic<unsigned int>>>(phRunningThreadsName);
    auto phMaxThreadsPtr =
      persistent_roots().lookup<gc_wrapped<atomic<unsigned int>>>(phMaxThreadsName);
    assert(phIterCtrPtr != nullptr && phRunningThreadsPtr != nullptr && phMaxThreadsPtr != nullptr);
    phIterCtrPtr->store(0);
    phRunningThreadsPtr->store(0);
    phMaxThreadsPtr->store(numProcesses * numThreads);
  }


  // Clear old logs
  system("rm -f outlog/*");
  system("mkdir -p outlog");

  string procStr = string("./gcdemo")
                 + (isBenchmark ? " -b " : "")
                 + " -C " + to_string(commentTagMean)
                 + (isDebugMode ? " -d " : "")
                 + " -i " + to_string(iters)
                 + " -n " + prName
                 + " -P " + to_string(postTagMean)
                 + " -r " + to_string(ratio) 
                 + " -t " + to_string(numThreads)
                 + "&";

  for (unsigned int i = 0; i < numProcesses; i++) {
    system(procStr.c_str());
  }

  return 0;
}
